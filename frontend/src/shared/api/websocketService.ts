export const WS_URL = import.meta.env.VITE_WS_URL

class WebSocketService {
    socket: WebSocket | null = null
    retries: number = 0
    maxRetries: number = 2

    async connect() {
        if (this.socket) return

        const token = localStorage.getItem('token')

        try {
            this.socket = new WebSocket(WS_URL)

            this.socket.onopen = () => {
                console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                this.sendMessage({ token })
            }

            this.socket.onmessage = (event) => {
                const data = JSON.parse(event.data)
                if (data.type === "error" && data.content === "unauthorized") {
                    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...")

                    if (this.retries < this.maxRetries) {
                        this.retries++
                        this.disconnect()
                        setTimeout(() => this.connect(), 1000)
                    } else {
                        throw new Error("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
                    }
                } else {
                    console.log("üì© –°–æ–æ–±—â–µ–Ω–∏–µ:", event.data)
                }
            }

            this.socket.onclose = () => console.log("üîÑ WebSocket –∑–∞–∫—Ä—ã—Ç!")
            this.socket.onerror = (error) => console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error)
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error)
        }
    }

    disconnect() {
        if (this.socket) {
            this.socket.close();
            this.socket = null;
            console.log("üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
        }
    }

    sendMessage(message: any) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(JSON.stringify(message));
        } else {
            console.error("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        }
    }
}

export const webSocketService = new WebSocketService()